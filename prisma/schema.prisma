// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  username String  @unique
  email    String  @unique
  password String
  city     String?
  country  String?
  createdAt DateTime @default(now())
}

model Summary {
  id            String   @id @default(cuid())
  user_id       String   // Matches Clerk User ID format
  youtube_url   String
  summary_content String   @db.Text // Explicitly use TEXT type
  created_at    DateTime @default(now()) @db.Timestamp(6) // Timestamp with time zone (default for DateTime)

  @@index([user_id]) // Add index for faster lookups by user_id
  @@map("summaries") // Explicitly map to the 'summaries' table name
}

model Credits {
  id                String   @id @default(cuid())
  userId            String   @unique // Clerk user ID
  summariesLeft     Int      @default(0)
  plan              String   @default("free") // free, basic, pro, enterprise
  stripeCustomerId  String?  @unique
  subscriptionId    String?
  subscriptionStatus String? // active, canceled, past_due, etc.
  lastSummaryAt     DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([subscriptionId])
}

model SummaryJob {
  id            String   @id @default(nanoid())
  userId        String
  youtubeUrl    String
  status        String   @default("pending") // pending, processing, completed, failed
  error         String?  // Store error message if failed
  summaryId     String?  // Reference to the summary once completed
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  completedAt   DateTime?

  @@index([userId])
  @@index([status])
}




